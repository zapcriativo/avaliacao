@model DomainProduct.Entities.Product

<div id="Product_@Model.IdProduct" class="ui card produto" data-exhausted="@Model.FlagExhausted">
<input type="hidden" id="selected-references_@Model.IdProduct" />
<div class="content">

    <div class="flip-container" ontouchstart="this.classList.toggle('hover');">     
          <div class="flipper">         
            <div class="front">             

                    @if (Model.AlternativeImage != null)
                    {
                        <a class="ui slide masked reveal image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)">
                            <img id="mainImageCard_@Model.IdProduct" src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)">
                            <img src="@Model.AlternativeImage" class="hidden content" onerror="imgError(this)">

                            <!--REMOVER && Model.SealStatus.Name != "Normal" ASSIM QUE CORRIGIR PAINEL-->
                            @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                            {
                                <div class="ui bottom right attached label massive imagetag">
                                    <img src="@Model.SealStatus.Image" alt="@Model.SealStatus.Name" class="ui image tiny" onerror="imgError(this)">
                                </div>
                            }
                        </a>
                    }
                    else
                    {
                        <a class="ui image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)">
                            <img id="mainImageCard_@Model.IdProduct" src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)">
                            @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                            {
                                <div class="ui bottom right attached label massive imagetag">
                                    <img src="@Model.SealStatus.Image" class="ui image tiny" onerror="imgError(this)">
                                </div>
                            }
                        </a>
                    }

                    <div class="ui horizontal divider avaliacao">
                        <div class="ui tiny star rating" data-rating="@Model.Rate.Value"></div>
                    </div>

<div class="info">
            <div class="dados">
                <div itemscope itemtype="http://schema.org/Product">
                    <link itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" rel="author" />
                    <a itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)"><span itemprop="name"><h1>@Model.Name</h1></span></a>
                    <span itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                        @if (Model.PricePromotion != null && Model.PricePromotion > 0)
                        {
                            <span id="basePrice_@Model.IdProduct" class="precoBase">de <i>@string.Format("{0:c}", Model.Price)</i> por @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span> 
                            <span itemprop="preco" class="preco">@string.Format("{0:c}", Model.PricePromotion)</span>
                        }
                        else
                        {
                            <span id="price_@Model.IdProduct" class="preco"><span class="precoBase">@(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span> @string.Format("{0:c}", Model.Price)</span>
                        }
                        @if (Model.InstallmentMax != null)
                        {
                            <span>
                                ou em <span class="installmentMaxNumber">@Model.InstallmentMax.MaxNumber</span>
                                x de <span class="installmentMaxValue">@string.Format("{0:c}", Model.InstallmentMax.Value)</span>
                            </span>
                        }
                    </span>
                </div>
            </div>
</div>
   
            </div>       <!-- FECHA A FRENTE DO CARD -->       
            <div class="back">              
<div class="info">



            <div class="dados">
                <div itemscope itemtype="http://schema.org/Product">
                    <link itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" rel="author" />
                    <a itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)"><span itemprop="name"><h1>@Model.Name</h1></span></a>
                    <span itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                        @if (Model.PricePromotion != null && Model.PricePromotion > 0)
                        {
                            <span id="basePrice_@Model.IdProduct" class="precoBase">de <i>@string.Format("{0:c}", Model.Price)</i> por @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span> 
                            <span itemprop="preco" class="preco">@string.Format("{0:c}", Model.PricePromotion)</span>
                        }
                        else
                        {
                            <span id="price_@Model.IdProduct" class="preco"><span class="precoBase">@(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span> @string.Format("{0:c}", Model.Price)</span>
                        }
                        @if (Model.InstallmentMax != null)
                        {
                            <span>
                                ou em <span class="installmentMaxNumber">@Model.InstallmentMax.MaxNumber</span>
                                x de <span class="installmentMaxValue">@string.Format("{0:c}", Model.InstallmentMax.Value)</span>
                            </span>
                        }
                    </span>
                </div>
            </div>


            <div class="sku-options mobile-hide @(Session["segment"] != null && Session["segment"].ToString() == "b2b" ? "hideme" : string.Empty)">

                <h5 id="produto-esgotado_@Model.IdProduct" class="text center @(Model.FlagExhausted ? " " : "hideme" )">Produto Esgotado</h5>

                @if (Model.AvailableReferences != null)
                {
                    foreach (var reference in Model.AvailableReferences)
                    {
                        <div id="referencefromproduct_@Model.IdProduct" class="ui fluid selection dropdown dropdownreference" data-total-referencia="@(Model.AvailableReferences != null ? Model.AvailableReferences.Count() : 0)" data-idproduct="@Model.IdProduct">
                            <input type="hidden" name="reference_@Model.IdProduct" data-id-reference="@reference.IdReference" id="@reference.Name">
                            <i class="dropdown icon"></i>
                            <span class="text">@reference.Name</span>
                            <div class="menu">
                                <div class="header">
                                    @reference.Name
                                </div>
                                <div class="scrolling menu">
                                    @foreach (var variation in reference.Variations)
                                    {
                                        <div class="item" data-value="@variation.IdVariation">
                                            @if (variation.Color != null)
                                            {
                                                <div class="ui empty circular label" style="background-color: @LojaCorp.Control.Static.HexaToRgb(variation.Color) !important; border-color: #1B1C1D !important;"></div>
                                            }
                                            @variation.Name
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="ui small divider hidden"></div>
                    }
                }
                <!-- Verificar se o produto é conjunto -->
                @if (Model.HasConjunct)
                {
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" class="ui labeled icon button green fluid btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon announcement"></i>
                        Comprar
                    </a>
                }
                else if (Model.FlagExhausted || Model.Stock <= 0)
                {
                    <a id="btn-comprar-card-@Model.IdProduct" class="ui labeled icon button grey fluid avise-card avise-me-modal" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon announcement"></i>
                        Avise-me
                    </a>
                }
                else if (Session["EventList"] != null)
                {
                    <a id="add-event-list-@Model.IdProduct" class="ui labeled icon button green fluid add-event-list" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Adicionar à Lista
                    </a>
                }
                else
                {
                    <a id="btn-comprar-card-@Model.IdProduct" class="ui labeled icon button green fluid btn-comprar-card" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Comprar
                    </a>
                <br/>
                <a class="ui basic button right  primary right floated mobile-fluid" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" style="width:100%">
                    <i class="icon search"></i>DETALHES
                </a>

                }
            </div>

            <div class="botoes">
                @*  <a class="ui circular basic icon button heart left floated mobile-hide">
                        <i class="icon heart"></i>
                    </a>

                    <a class="ui circular basic icon button default mobile-hide quick-view-opener" data-modal-open="@Model.IdProduct" tabindex="0">
                        <i class="icon unhide"></i>
                    </a>
                *@
        
            </div>

</div>
            </div>      
          </div>  
    </div>


</div>
</div>