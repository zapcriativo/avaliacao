{"version":3,"sources":["jquery.jetroute.js"],"names":["$","window","document","undefined","jetRoute","route","callback","options","settings","extend","_url","routeType","routeManager","this","getUrlArray","getRoute","routeParams","currentURL","type","location","pathname","cookie","match","name","pop","getCookie","key","routes","checkRoute","compareUrlRoute","currentRoute","regex","arraySize","length","testValue","i","exec","dynamic","url","split","shift","cookieName"],"mappings":"cAMC,SAAWA,EAAGC,EAAQC,EAAUC,GAS7BH,EAAEI,SAAW,SAAUC,EAAOC,EAAUC,GACpC,IAAIC,EAAWR,EAAES,UAAWT,EAAEI,SAASI,SAAUD,GAoErCG,OArEdN,KAEuB,WADjBI,KAAAA,WAAwBR,KAAEI,YAASI,KAAUD,cAAjDC,EAAAG,YACMC,KAAAA,aAAeC,KAAAC,YAAAD,KAAAE,SAAAV,IAAAH,EAAAc,aAEbX,MAAKY,KAALF,SAAyBD,IAEzBZ,KAASc,cACLX,KAGAC,cARS,SAQTA,GACH,GAAA,WAAAY,EATY,OAAAjB,EAAAkB,SAAAC,SAYb,GAAa,WAATF,EAAmB,CAKf,OAJUC,SAAAA,GACjB,IAAAE,EAAAnB,EAAAmB,OAAAC,MAAA,YAAAC,EAAA,oBACGL,OAASG,EAAUA,EAAAG,MAAA,GAEfC,CAAavB,EAASmB,YAEzB,MAHD,mBAAAH,EAIOO,SADN,GAYTV,SA/BiB,SA+BRV,GACL,IAAK,IAAIqB,KAAOlB,EAASmB,OACrB,GAAID,IAAQrB,EACR,OAAOG,EAASmB,OAAOD,IAAvBE,WAlCK,WAmCR,OAAAf,KAAAgB,gBAAAhB,KAAAI,WAAAJ,KAAAiB,eAYTD,gBA/CiB,SA+CDZ,EAAYa,GAIxB,IAAK,IAHCC,EAAY,YACdC,EAAcF,EAAaG,OACzBC,GAAY,EACTC,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAJxCN,IAAAA,EA/CiBE,EAAAK,KAAAN,EA+CDb,IACNc,EACFC,EAAcF,YAAaG,EAA/B,IAAAhB,EAAAkB,GAESA,EAAWH,KAAWG,EAAKA,KAC5BE,GAAgBD,GAKZF,OAAAA,GAEPpB,YA3DQ,SA2DRwB,GACJ,IAAA5B,EAAA4B,EAAAC,MAAA,KAILzB,MAEoB,KAAZJ,EAAK,IAJTA,EAAOwB,QA9DMxB,IAmEJ8B,QAETxC,EAAAI,SAAAI,UACHmB,UAtEgBhB,UAArB,GAwEA8B,WAAO7B,IAnFd,CAsFOe,OAAAA,OADkBzB","file":"jquery.jetroute.min.js","sourcesContent":["/**\n * jetRoute\n * Author: Heitor Ramon Ribeiro\n * Email: heitor.ramon@gmail.com\n * Site: heitorramon.com\n */\n;(function ($, window, document, undefined) {\n    \"use strict\";\n    /**\n     * $.jetRoute Plugin\n     * @param route (Initial Route)\n     * @param callback (Execute if Route is the current)\n     * @param options (Route Options)\n     * @returns {*}\n     */\n    $.jetRoute = function (route, callback, options) {\n        let settings = $.extend({}, $.jetRoute.settings, options);\n        const routeManager = {\n            init(){\n                this.currentURL   = this.getUrlArray(this.getCurrentUrl(settings.routeType));\n                this.currentRoute = this.getUrlArray(this.getRoute(route));\n                document.routeParams = {\n                    route: this.getRoute(route)\n                };\n                if (this.checkRoute()) {\n                    callback();\n                }\n            },\n            getCurrentUrl(type){\n                if (type === \"window\") {\n                    return window.location.pathname;\n                }\n                if (type === \"cookie\") {\n                    let getCookie = (name) => {\n                        let cookie = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n                        return cookie ? cookie.pop() : '';\n                    };\n                    return getCookie(settings.cookieName);\n                }\n                if (typeof type === \"function\") {\n                    return type();\n                }\n            },\n            /**\n             * Return the URI of the called initial route.\n             * @param route\n             * @returns {*}\n             */\n            getRoute(route){\n                for (let key in settings.routes) {\n                    if (key === route) {\n                        return settings.routes[key];\n                    }\n                }\n            },\n            checkRoute(){\n                return this.compareUrlRoute(this.currentURL, this.currentRoute);\n            },\n            /**\n             * Route Compare and Dynamic Route Atributes\n             * @param currentURL\n             * @param currentRoute\n             * @returns {boolean}\n             */\n            compareUrlRoute(currentURL, currentRoute){\n                const regex     = /\\{(.*)\\}/i;\n                let arraySize   = currentRoute.length,\n                      testValue = false;\n                for (let i = 0; i < arraySize; i++) {\n                    let dynamic = regex.exec(currentRoute[i]);\n                    if (dynamic) {\n                        document.routeParams[dynamic[1]] = currentURL[i];\n                    } else {\n                        if (currentRoute[i] === currentURL[i]) {\n                            testValue = true;\n                        }\n                    }\n                }\n\n                return testValue;\n            },\n            getUrlArray(url){\n                let _url = url.split(\"/\");\n                if (_url[0] === \"\"){\n                    _url.shift();\n                }\n                return _url;\n            }\n        };\n        return routeManager.init();\n    };\n    $.jetRoute.settings = {\n        routes: {},\n        routeType: \"\",\n        cookieName: \"\"\n    };\n\n})(jQuery, window, document);\n"]}